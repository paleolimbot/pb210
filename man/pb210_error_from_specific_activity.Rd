% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/counts.R
\name{pb210_error_from_specific_activity}
\alias{pb210_error_from_specific_activity}
\alias{pb210_error_from_counts}
\alias{pb210_specific_activity_from_counts}
\alias{pb210_counts_from_specific_activity}
\title{Work with raw count data}
\usage{
pb210_error_from_specific_activity(pb210_specific_activity, count_mass,
  count_time)

pb210_error_from_counts(counts, count_mass, count_time)

pb210_specific_activity_from_counts(counts, count_mass, count_time)

pb210_counts_from_specific_activity(pb210_specific_activity, count_mass,
  count_time)
}
\arguments{
\item{pb210_specific_activity}{A specific activity of lead-210, in Bq / kg.}

\item{count_mass}{The amount of mass each sample that was counted (kg). Can be
a vector to specify different masses for each sample.}

\item{count_time}{The time each sample was counted, as resolved by
\code{\link[lubridate:as.duration]{lubridate::as.duration()}}. Raw numbers are treated as a number of seconds, however
we reccomend using \code{\link[lubridate:ddays]{lubridate::ddays()}} and/or \code{\link[lubridate:dhours]{lubridate::dhours()}} to make
the units explicit.}

\item{counts}{The number of measured decays}
}
\value{
A vector of specific activities or specific activity errors in Bq / kg.
}
\description{
In an ideal world, the people who count your samples also calculate the
specific activity and associated error. In an imperfect world, these functions
are here to calculate specific activity and error given the required information.
}
\examples{
pb210_error_from_specific_activity(
  c(500, 100, 10, 5),
  count_mass = 0.5 / 1000,
  count_time = lubridate::ddays(1)
)

pb210_error_from_counts(
  c(21600, 4320, 432, 216),
  count_mass = 0.5 / 1000,
  count_time = lubridate::ddays(1)
)

pb210_specific_activity_from_counts(
  c(21600, 4320, 432, 216),
  count_mass = 0.5 / 1000,
  count_time = lubridate::ddays(1)
)

pb210_counts_from_specific_activity(
  c(500, 100, 10, 5),
  count_mass = 0.5 / 1000,
  count_time = lubridate::ddays(1)
)

}
